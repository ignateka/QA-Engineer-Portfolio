-- Функциональное тестирование сервиса Яндекс Маршруты. Сервис строит маршрут и рассчитывает стоимость поездки для каршеринга, такси или собственного автомобиля. --
Этот проект помог мне закрепить на практике следующие знания:
1) анализ и декомпозиция требований;
2) mindmap для визуализации требований;
3) составление тест-кейсов;
4) применение техник КЭ и ГЗ.
5) Была проделана работа с визуализацией требований к сервису. 

-- В следующей версии Яндекс. Маршрутов выпустили фичу с каршерингом (новый вид транспорта) и подготавливали к релизу фичу с аэротакси (её нужно было протестировать для дальнейшего анализа готовности фичи к выпуску). --
Сначала я протестировала каршеринг: составила тестовую документацию, выполнила проверки, завела баг-репорты.
Далее тестировала новую фичу с аэротакси. Для этого я работала в Charles: подменила ответы от бэкенда и настроила автоматические ответы.
После полного тестирования написала отчёт о проделанной работе. Где писала рекомендацию стоит ли выпускать версию в релиз или стоит доработать баги и провести повторное тестирование.

-- Яндекс. Метро - интерактивная схема московского метрополитена. Она позволяет рассчитывать время в пути и строить удобные маршруты. Когда пользователь выбирает, откуда и куда он едет, приложение строит маршрут. В маршруте есть рекомендация по посадке. Приложение показывает, где лучше сесть: в первый вагон, ближе к голове, в середине, ближе к хвосту или в последний вагон поезда.
Команда Яндекс. Метро сделала рефакторинг мобильного приложения на Android — внесла правки в код. 
Нужно было: 1) протестировать те части продукта, которых коснулись изменения;
2) провести регрессионное тестирование и убедиться, что новую версию можно заливать в стор.
По результатам проверок необходимо было предоставить отчёт о тестировании менеджеру.
Я оформила проверки в виде чек-листа к функциональному тестированию. Кроме проверок функциональности, затронутой рефакторингом, нужно было провести регрессионное тестирование. Для этого написала чек-лист, который учитывает особенности мобильного приложения: 
1) Определила, какая функциональность Яндекс Метро взаимодействует с мобильным устройством.
2) Зафиксировала мобильные проверки, которые связаны с этой функциональностью.
3) Учла проверки, которые необходимы для любого мобильного приложения — например, тестирование обновления.
Тестирование провела на эмуляторе Android Studio.
Для этих двух (Яндекс. Маршруты и Яндекс. Метро) проектов мне нужно было:
1) составить чек-листы и тест-кейсы, позитивные и негативные проверки;
2) провести кроссплатформенное и кросбраузерное тестирование;
3) протестировать вёрстку на адаптивность;
4) использовать сниффер;
5) тестировать API.
Инструменты и стек: #AndroidStudio #Charles #Postman #Swagger #Apidoc

-- Яндекс. Прилавок -- 
Яндекс. Прилавок - это сервис, который предоставляет предпринимателям и компаниям возможность создавать собственные виртуальные магазины в онлайн-пространстве. Этот инструмент облегчает процесс создания и настройки интернет-магазинов, управления продажами и обработки заказов. Он также обеспечивает интеграцию с онлайн-платежами, что делает его полезным для развития электронной коммерции и совершения успешных онлайн-сделок. --
Разработчики сделали новую функциональность в API Яндекс.Прилавка. Новую версию API передали на тестирование.
Я проанализировала требования к новой функциональности бэкенда Яндекс.Прилавка. Изучила документацию к API в Apidoc. 
Спроектируй тесты в виде чек-листа, чтобы покрыть функциональность, которую тебе передали на тестирование: она описана выше. Авторизацию проверять не нужно.
Чек-лист поместила в гугл-таблицу (можно найти в Links).
Протестировала API через Postman и завела баг-репорты в YouTrack.

-- Яндекс.Самокат --
Это сервис, который позволяет арендовать электрический самокат на несколько дней.
Построила mindmap, чтобы визуализировать требования, где это нужно.
Разбила функциональность на атомарные блоки, определи объекты тестирования.
Спроектировала тесты, чтобы покрыть все требования. Применила техники КЭ и ГЗ, а также таблицу принятия решений там, где это нужно.
Оптимизировала количество проверок в UI-тестах и тестах на логику работы функциональности.
Провела тестирование и завела баг-репорты.
Чтобы проверить обращения к определённому URL, использовала DevTools, Charles или Postman.
